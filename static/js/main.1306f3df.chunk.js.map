{"version":3,"sources":["serviceWorker.js","components/Slide.js","components/LeftArrow.js","components/RightArrow.js","components/Slider.js","index.js"],"names":["Boolean","window","location","hostname","match","Slide","_ref","image","styles","backgroundImage","concat","backgroundSize","backgroundRepeat","backgroundPosition","react_default","a","createElement","className","style","LeftArrow","props","onClick","handlePrevSlide","aria-hidden","RightArrow","handleNextSlide","Slider","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentIndex","setState","prevState","translateValue","slideWidth","images","length","document","querySelector","clientWidth","transform","transition","map","index","components_Slide","key","components_LeftArrow","components_RightArrow","Component","ReactDOM","render","components_Slider","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCNSC,EAVD,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MACTC,EAAS,CACbC,gBAAe,OAAAC,OAASH,EAAT,KACfI,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,WAEtB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,MAAOV,KCCxBW,EARG,SAAAC,GAChB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBI,QAASD,EAAME,iBAC9CR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yBAAyBM,cAAY,WCKzCC,EARI,SAAAJ,GACjB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBI,QAASD,EAAMK,iBAC9CX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAA0BM,cAAY,WCoE1CG,qBAlEb,SAAAA,EAAYN,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMV,KAiBRE,gBAAkB,WACgB,IAA5BK,EAAKO,MAAMC,cAGfR,EAAKS,SAAS,SAAAC,GAAS,MAAK,CAC1BF,aAAcE,EAAUF,aAAe,EACvCG,eAAgBD,EAAUC,eAAiBX,EAAKY,iBAxBjCZ,EA4BnBF,gBAAkB,WAChB,GAAIE,EAAKO,MAAMC,eAAiBR,EAAKO,MAAMM,OAAOC,OAAS,EACzD,OAAOd,EAAKS,SAAS,CACnBD,aAAc,EACdG,eAAgB,IAGpBX,EAAKS,SAAS,SAAAC,GAAS,MAAK,CAC1BF,aAAcE,EAAUF,aAAe,EACvCG,eAAgBD,EAAUC,eAAiBX,EAAKY,iBArCjCZ,EAyCnBY,WAAa,WACX,OAAOG,SAASC,cAAc,UAAUC,aAxCxCjB,EAAKO,MAAQ,CACXM,OAAQ,CACN,kEACA,kEACA,gEACA,kEACA,qEACA,kEACA,wEACA,yEAEFL,aAAc,EACdG,eAAgB,GAdDX,wEA8CjB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,iBACVC,MAAO,CACL2B,UAAS,cAAAnC,OAAgBoB,KAAKI,MAAMI,eAA3B,OACTQ,WAAY,6BAGbhB,KAAKI,MAAMM,OAAOO,IAAI,SAACxC,EAAOyC,GAAR,OACrBlC,EAAAC,EAAAC,cAACiC,EAAD,CAAOC,IAAKF,EAAOzC,MAAOA,OAG9BO,EAAAC,EAAAC,cAACmC,EAAD,CAAW7B,gBAAiBQ,KAAKR,kBACjCR,EAAAC,EAAAC,cAACoC,EAAD,CAAY3B,gBAAiBK,KAAKL,0BA7DrB4B,cCArBC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAYd,SAASe,eAAe,SL2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1306f3df.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Slide = ({ image }) => {\n  const styles = {\n    backgroundImage: `url(${image})`,\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: '50% 60%'\n  };\n  return <div className=\"slide\" style={styles} />;\n};\n\nexport default Slide;\n","import React from 'react';\n\nconst LeftArrow = props => {\n  return (\n    <div className=\"backArrow arrow\" onClick={props.handlePrevSlide}>\n      <i className=\"fa fa-arrow-left fa-2x\" aria-hidden=\"true\" />\n    </div>\n  );\n};\n\nexport default LeftArrow;\n","import React from 'react';\n\nconst RightArrow = props => {\n  return (\n    <div className=\"nextArrow arrow\" onClick={props.handleNextSlide}>\n      <i className=\"fa fa-arrow-right fa-2x\" aria-hidden=\"true\" />\n    </div>\n  );\n};\n\nexport default RightArrow;\n","import React, { Component } from 'react';\nimport Slide from './Slide';\nimport LeftArrow from './LeftArrow';\nimport RightArrow from './RightArrow';\nimport '../style.css';\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: [\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/aurora.jpg',\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/canyon.jpg',\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/city.jpg',\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/desert.jpg',\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/mountains.jpg',\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/redsky.jpg',\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/sandy-shores.jpg',\n        'https://s3.us-east-2.amazonaws.com/dzuz14/thumbnails/tree-of-life.jpg'\n      ],\n      currentIndex: 0,\n      translateValue: 0\n    };\n  }\n\n  handlePrevSlide = () => {\n    if (this.state.currentIndex === 0) {\n      return;\n    }\n    this.setState(prevState => ({\n      currentIndex: prevState.currentIndex - 1,\n      translateValue: prevState.translateValue + this.slideWidth()\n    }));\n  };\n\n  handleNextSlide = () => {\n    if (this.state.currentIndex === this.state.images.length - 1) {\n      return this.setState({\n        currentIndex: 0,\n        translateValue: 0\n      });\n    }\n    this.setState(prevState => ({\n      currentIndex: prevState.currentIndex + 1,\n      translateValue: prevState.translateValue - this.slideWidth()\n    }));\n  };\n\n  slideWidth = () => {\n    return document.querySelector('.slide').clientWidth;\n  };\n\n  render() {\n    return (\n      <div className=\"slider\">\n        <div\n          className=\"slider-wrapper\"\n          style={{\n            transform: `translateX(${this.state.translateValue}px)`,\n            transition: 'transform ease-out 0.45s'\n          }}\n        >\n          {this.state.images.map((image, index) => (\n            <Slide key={index} image={image} />\n          ))}\n        </div>\n        <LeftArrow handlePrevSlide={this.handlePrevSlide} />\n        <RightArrow handleNextSlide={this.handleNextSlide} />\n      </div>\n    );\n  }\n}\n\nexport default Slider;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Slider from './components/Slider';\n\nReactDOM.render(<Slider />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}